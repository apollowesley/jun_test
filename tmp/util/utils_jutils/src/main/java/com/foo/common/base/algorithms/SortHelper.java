package com.foo.common.base.algorithms;

import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Arrays;

/**
 * Auto Generated By IntelliJIdea on 9/18/16.
 */
public class SortHelper {

    final private static Logger logger = LoggerFactory.getLogger(SortHelper.class);

    int array[] = {5, 8, 9, 12, 1, 0};

    @Test
    public void bubbleSort() {
        final String op = "bubbleSort_Asc";
        final boolean isAsc = true;
        final int arrayLength = array.length;
        for (int i = 0; i < arrayLength; i++) {
            for (int x = 0; x < arrayLength - i - 1; x++) {
                int left = x;
                int right = x + 1;
                if (isAsc) {
                    if (array[left] > array[right]) {
                        swapArrayIndex(left, right);
                    }
                } else {
                    if (array[left] < array[right]) {
                        swapArrayIndex(left, right);
                    }
                }
            }
        }
        logger.info("after op:{}, isAsc:{} , result:{}", op, isAsc, array);
    }

    private void swapArrayIndex(int leftIndex, int rightIndex) {
        int tmp = array[leftIndex];
        array[leftIndex] = array[rightIndex];
        array[rightIndex] = tmp;
    }

    @Test
    public void insertSort() {
        final String op = "bubbleSort_Asc";
        final boolean isAsc = true;
        final int arrayLength = array.length;
        for (int i = 1; i < arrayLength; i++) {
            int tmp = array[i];
            int k;
            inner:
            for (k = i - 1; k >= 0; k--) {
                if (tmp < array[k]) {
                    array[k + 1] = array[k];
                } else {
                    break inner;
                }
            }
            array[k + 1] = tmp;
        }
        logger.info("after op:{}, isAsc:{} , result:{}", op, isAsc, array);
    }

    @Test
    public void quickSort() {
        final String op = "bubbleSort_Asc";
        final boolean isAsc = true;
        final int arrayLength = array.length;
        quickSortRecusion(array, 0, arrayLength - 1);
        logger.info("after op:{}, isAsc:{} , result:{}", op, isAsc, array);
    }

    private void quickSortRecusion(int[] a, int left, int right) {
        if (left < right) { //如果不加这个判断递归会无法退出导致堆栈溢出异常
            int middle = getMiddle(a, left, right);
            quickSortRecusion(a, 0, middle - 1);
            quickSortRecusion(a, middle + 1, right);
        }
    }

    private static int getMiddle(int[] a, int left, int right) {
        int temp = a[left];//基准元素
        while (left < right) {
            //找到比基准元素小的元素位置
            while (left < right && temp <= a[right]) {
                right--;
            }
            a[left] = a[right];
            while (left < right && temp >= a[left]) {
                left++;
            }
            a[right] = a[left];
        }
        a[left] = temp;
        return left;
    }

}
