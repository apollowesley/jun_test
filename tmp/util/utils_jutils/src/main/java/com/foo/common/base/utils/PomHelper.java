package com.foo.common.base.utils;

import com.foo.common.base.utils.laboratory.httpClient.MavenSearchResultJson;
import com.foo.common.base.utils.laboratory.jaxb.autoGenerated.Model;
import com.foo.common.base.utils.laboratory.jaxb.autoGenerated.Plugin;
import com.foo.common.base.utils.laboratory.jaxb.autoGenerated.Repository;
import com.google.common.base.Strings;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class PomHelper {

    private final static Logger logger = LoggerFactory
            .getLogger(PomHelper.class);

    private Model model = null;

    @SuppressWarnings({"unchecked", "ConstantConditions"})
    @Test
    public void analyzePomRepository() throws Exception {
        logger.info("loading【pluginRepositories->pluginRepository】 start now.");
        Object repo = getPomModel().getPluginRepositories();

        if (repo == null) {
            logger.info("you have not config pluginRepositories");
            return;
        }
        List<Repository> myList = Lists.newArrayList(getPomModel().getPluginRepositories().getPluginRepository());
        if (myList.size() < 1) {
            logger.info("you have not config pluginRepository");
            return;
        }

        long aliyunNexusCount =
                myList.stream().filter((r) -> Strings.nullToEmpty(r.getId()).equals("aliyun-nexus")).count();

        if (aliyunNexusCount < 1) {
            logger.warn("aliyun-nexus config not found,add it to your pluginRepositories.");
        }

        logger.info("analyze【pluginRepositories->pluginRepository】 success.");
    }

    @SuppressWarnings({"unchecked", "ConstantConditions"})
    @Test
    public void analyzePom()
            throws Exception {
        logger.info("analyzePom now.");
        Map<String, String> versionMap = Maps.newHashMap();
        for (org.w3c.dom.Element myProperty : getPomModel().getProperties().getAny()) {
            versionMap.put(myProperty.getLocalName(),
                    myProperty.getTextContent());
        }
        logger.info("versionMap is:{}", versionMap);
        List<Map<String, Object>> dependencies = getPomModel().getDependencies().getDependency().stream().map(
                (t) -> {
                    String tmpVersion = t.getVersion();
                    String tmpVersionNumber;
                    if (tmpVersion.startsWith("$")) {
                        tmpVersionNumber = versionMap.get(tmpVersion.replaceAll("\\$", "")
                                .replaceAll("\\{", "").replaceAll("\\}", ""));
                    } else {
                        tmpVersionNumber = tmpVersion;
                    }
                    return ImmutableMap.<String, Object>of(
                            "groupId", t.getGroupId(),
                            "version", tmpVersionNumber,
                            "artifactId", t.getArtifactId());
                }).collect(Collectors.toList());
        dependencies.forEach((r) -> logger.info("{}", r));
    }


    @SuppressWarnings({"unchecked", "ConstantConditions"})
    @Test
    public void analyzePomDependency()
            throws Exception {
        logger.info("loading【dependencies->dependency】 now.");
        Map<String, String> versionMap = Maps.newHashMap();
        for (org.w3c.dom.Element myProperty : getPomModel().getProperties().getAny()) {
            versionMap.put(myProperty.getLocalName(),
                    myProperty.getTextContent());
        }
        List<Map<String, Object>> dependencies = getPomModel().getDependencies().getDependency().stream().map(
                (t) -> {
                    String tmpVersion = t.getVersion();
                    String tmpVersionNumber;
                    if (tmpVersion.startsWith("$")) {
                        tmpVersionNumber = versionMap.get(tmpVersion.replaceAll("\\$", "")
                                .replaceAll("\\{", "").replaceAll("\\}", ""));
                    } else {
                        tmpVersionNumber = tmpVersion;
                    }
                    return ImmutableMap.<String, Object>of(
                            "groupId", t.getGroupId(),
                            "version", tmpVersionNumber,
                            "artifactId", t.getArtifactId());
                }
        ).collect(Collectors.toList());
        dependencies.forEach(this::analyzePomDependencyRealtime);
    }

    private void analyzePomDependencyRealtime(Map<String, Object> sourceMap) {
        final String groupId = sourceMap.get("groupId").toString();
        final String artifactId = sourceMap.get("artifactId").toString();
        final String oldVersion = sourceMap.get("version").toString();
        logger.info(
                "groupId:【{}】,artifactId:【{}】,version:【{}】analysis start.",
                groupId, artifactId, oldVersion);
        CloseableHttpClient httpclient = HttpClients.createDefault();
        String url = "http://search.maven.org/solrsearch/select?q=g:%22"
                + groupId + "%22+AND+a:%22" + artifactId + "%22&rows=1&wt=json";
        ResponseHandler<String> responseHandler = new BasicResponseHandler();
        HttpGet httpGet = new HttpGet(url);
        try {
            String responseBody = httpclient.execute(httpGet, responseHandler);
            Gson gson = new GsonBuilder().serializeNulls().create();
            MavenSearchResultJson object = gson.fromJson(responseBody, MavenSearchResultJson.class);
            final String newVersion = object.getVersion();
            if (oldVersion.equals(newVersion)) {
                logger.info(
                        "groupId:【{}】,artifactId:【{}】is the newest.version.",
                        groupId, artifactId);
            } else {
                logger.info(
                        "groupId:【{}】,artifactId:【{}】need update,from version:【{}】,newVersion:【{}】",
                        groupId, artifactId, oldVersion, object.getVersion());
            }
        } catch (Exception e) {
            logger.error(
                    "groupId:【{}】,artifactId:【{}】analysis error.",
                    groupId, artifactId, e);
        }
    }

    @Test
    @SuppressWarnings({"unchecked", "ConstantConditions"})
    public void analyzePomPlugin()
            throws Exception {
        logger.info("loading【build->pluginManagement->plugins】now.");
        List<Map<String, Object>> plugins;
        List<Plugin> tmpPlugins = getPomModel().getBuild().getPluginManagement().getPlugins().getPlugin();
        if (tmpPlugins != null && tmpPlugins.size() > 0) {
            plugins = getPomModel().getBuild().getPluginManagement().getPlugins().getPlugin().stream().map(
                    (t) -> ImmutableMap.<String, Object>of(
                            "groupId", t.getGroupId(),
                            "version", t.getVersion(),
                            "artifactId", t.getArtifactId())
            ).collect(Collectors.toList());
        } else {
            logger.info("pluginManagement is empty,loading【build->plugins】now.");
            plugins = getPomModel().getBuild().getPlugins().getPlugin().stream().map(
                    (t) -> ImmutableMap.<String, Object>of(
                            "groupId", t.getGroupId(),
                            "version", t.getVersion(),
                            "artifactId", t.getArtifactId())
            ).collect(Collectors.toList());
        }
        plugins.parallelStream().forEach(this::analyzePomDependencyRealtime);
    }

    @SuppressWarnings("unchecked")
    private Model getPomModel() {
        if (model != null) {
            return model;
        }
        JAXBContext jaxbContext;
        try {
            jaxbContext = JAXBContext
                    .newInstance("com.foo.common.base.utils.laboratory.jaxb.autoGenerated");
            Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
            JAXBElement<Model> jaxbElement = (JAXBElement<Model>) jaxbUnmarshaller
                    .unmarshal(FooUtils.getGlobalPomFile());
            return jaxbElement.getValue();
        } catch (JAXBException e) {
            logger.error("System will exit as analysis pom file failed:{}", e);
            System.exit(1);
        }
        return null;
    }

}
