package com.foo.common.base.algorithms;

import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * Auto Generated By IntelliJIdea on 9/18/16.
 */
public class RecusionHelper {

    final private static Logger logger = LoggerFactory.getLogger(RecusionHelper.class);

    @Test
    public void fibonacciSequenceBeforeJdk8() {
        final int limit = 20;
        int result[] = new int[limit];
        getFibonacciSequenceBeforeJdk8(result, 0);
        logger.info("fibonacciSequenceBeforeJdk8 is:{}", result);
    }

    private void getFibonacciSequenceBeforeJdk8(int[] result, int index) {
        if (index >= 20) {
            return;
        }
        if (index < 2) {
            result[0] = 0;
            result[1] = 1;
        } else {
            result[index] = result[index - 2] + result[index - 1];
        }
        getFibonacciSequenceBeforeJdk8(result, ++index);
    }


    @Test
    public void fibonacciSequenceOnJdk8() {
        final int limit = 20;
        List<Integer> myList = Stream.iterate(new int[]{0, 1}, (t) -> new int[]{t[1], t[0] + t[1]})
                .limit(limit)
                .map(t -> t[1]).collect(Collectors.toList());
        myList.add(0, 0);
        logger.info("fibonacciSequenceBeforeJdk8 is:{}", myList);


    }
}
