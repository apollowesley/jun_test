package com.foo.common.base.algorithms;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * Auto Generated By IntelliJIdea on 9/19/16.
 */
public class CommonAlgorithmsHelper {

    final private static Logger logger = LoggerFactory.getLogger(CommonAlgorithmsHelper.class);

    private List<String> list = Lists.newArrayList("10", "6", "9");
    private String myString = "HelloWorld";

    private class TreeNode {
        int val;
        TreeNode left;
        TreeNode right;

        public TreeNode(int val) {
            this.val = val;
        }
    }

    /**
     * 求二叉树中的节点个数递归解法： O(n)
     * （1）如果二叉树为空，节点个数为0
     * （2）如果二叉树不为空，二叉树节点个数 = 左子树节点个数 +
     * 右子树节点个数 + 1
     */
    public static int getNodeNumRec(TreeNode root) {
        if (root == null) {
            return 0;
        } else {
            return getNodeNumRec(root.left) + getNodeNumRec(root.right) + 1;
        }
    }

    @Test
    public void reverseList() {
        Collections.reverse(list);
        logger.info("jdk reverse example:{}", list);

        final int size = list.size();
        for (int i = 0, mid = size >> 1, j = size - 1; i < mid; i++, j--) {
            logger.info("i:{},j:{}", i, j);
            Collections.swap(list, i, j);
        }

        logger.info("jdk reverse example:{}", list);

        logger.info("result:{}", list.size() >> 1);
    }

    @Test
    public void findString() {
        int result = myString.indexOf("o");
        logger.info("jdk reverse example:{}", list);
        logger.info("result");
    }

    @Test
    public void roundIt() {
        Object r1 = Math.round(10.5);
        Object r2 = Math.round(-10.5);
        logger.info("result:{}", r1);
        logger.info("result:{}", r2);
    }


    @Test
    public void binaryTree() {
        TreeNode r1 = new TreeNode(1);
        TreeNode r2 = new TreeNode(2);
        TreeNode r3 = new TreeNode(3);
        TreeNode r4 = new TreeNode(4);
        TreeNode r5 = new TreeNode(5);
        TreeNode r6 = new TreeNode(6);

        r1.left = r2;
        r1.right = r3;
        r2.left = r4;
        r2.right = r5;
        r3.right = r6;

        logger.info("result:{}", getNodeNumRec(r6));
    }

}
