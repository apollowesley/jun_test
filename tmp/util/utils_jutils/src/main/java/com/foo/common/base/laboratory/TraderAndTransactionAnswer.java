package com.foo.common.base.laboratory;

import com.google.common.collect.ComparisonChain;
import com.google.common.collect.Ordering;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * Auto Generated By IntelliJIdea on 8/29/16.
 */
public class TraderAndTransactionAnswer {

    private static final Logger logger = LoggerFactory.getLogger(TraderAndTransactionAnswer.class);

    public static void main(String[] args) {
        Trader raoul = new Trader("Raoul", "Cambridge");
        Trader mario = new Trader("Mario", "Milan");
        Trader alan = new Trader("Alan", "Cambridge");
        Trader brian = new Trader("Brian", "Cambridge");
        List<Transaction> transactions = Arrays.asList(new Transaction(brian, 2011, 300),
                new Transaction(raoul, 2012, 1000),
                new Transaction(raoul, 2011, 400),
                new Transaction(mario, 2012, 710), new Transaction(mario, 2012, 700), new Transaction(alan, 2012, 950)
        );

        //1. Find all transactions in the year 2011 and sort them by value (small to high).
        List<Transaction> all2011Transactions = transactions.stream().filter((t) -> t.getYear() == 2011).sorted(
                (o1, o2) -> ComparisonChain.start().compare(o1.getValue(), o2.getValue(), Ordering.natural()).result()).collect(Collectors.toList());
        logger.info("Q1 ANSWER:{}", all2011Transactions);

        //2. What are all the unique cities where the traders work?
        Set<String> allUniqueCities = transactions.stream().map((t) -> {
            return t.getTrader().getCity();
        }).collect(Collectors.toSet());
        logger.info("Q2 ANSWER:{}", allUniqueCities);

        //3. Find all traders from Cambridge and sort them by name.
        List<Trader> allCambridgeTraders = transactions.stream().map(Transaction::getTrader)
                .filter((t) -> t.getCity().equals("Cambridge"))
                .distinct()
                .sorted((o1, o2) -> ComparisonChain.start().compare(o1.getName(), o2.getName(), Ordering.natural()).result())
                .collect(Collectors.toList());
        logger.info("Q3 ANSWER:{}", allCambridgeTraders);

        //4. Return a string of all traders’ names sorted alphabetically.
        String allTradeName = transactions.stream().map((t) -> {
            return t.getTrader().getName();
        }).distinct().sorted().collect(Collectors.joining(","));
        logger.info("Q4 ANSWER:{}", allTradeName);

        //5. Are any traders based in Milan?
        boolean anyMilanTrader = transactions.stream().anyMatch((t) -> t.getTrader().getCity().equals("Milan"));
        logger.info("Q5 ANSWER:{}", anyMilanTrader);

        //6. Print all transactions’ values from the traders living in Cambridge.
        transactions.stream().filter((t) -> t.getTrader().getCity().equals("Cambridge")).map(Transaction::getValue).forEach((t) -> {
            logger.info("Q6 ANSWER:{}", t);
        });

        //7. What’s the highest value of all the transactions?
        int highestValue = transactions.stream().map((t) -> t.getValue()).reduce(Integer::max).get();
        logger.info("Q7 ANSWER:{}", highestValue);

        //8. Find the transaction with the smallest value.
        Optional<Transaction> smallestTransaction = transactions.stream().min((o1, o2) -> ComparisonChain.start().compare(o1.getValue(), o2.getValue()).result());
        logger.info("Q8 ANSWER:{}", smallestTransaction.get());

    }
}
