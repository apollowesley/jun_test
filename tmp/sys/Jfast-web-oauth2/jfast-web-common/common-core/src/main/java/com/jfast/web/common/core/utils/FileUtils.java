package com.jfast.web.common.core.utils;import org.apache.commons.codec.binary.Base64;import javax.imageio.ImageIO;import java.awt.image.BufferedImage;import java.io.*;import java.util.zip.ZipEntry;import java.util.zip.ZipOutputStream;/** * 文件操作工具类 * @author zengjintao * @create 2019/3/25 13:26 * @since 1.0 **/public class FileUtils {    private static String uploadPath;    public static void setUploadPath(String uploadPath) {        FileUtils.uploadPath = uploadPath;    }    public static String getUploadPath() {        return uploadPath;    }    /**     * 将文件压缩成zip     * @param targetFilePath     * @param savePath     * @throws Exception     */    public static void fileDirectoryToZip(String targetFilePath, String savePath) throws Exception {        File file = new File(targetFilePath);        if (!file.exists())            throw new RuntimeException(targetFilePath + "does not exist");        File fileList[] = file.listFiles();        ZipOutputStream out = new ZipOutputStream(new FileOutputStream(savePath));        byte[] buffer = new byte[1024];        if (ObjectUtils.isNotEmpty(fileList)) {            for (File fileItem : fileList) {                FileInputStream fis = new FileInputStream(fileItem);                out.putNextEntry(new ZipEntry(fileItem.getName()));                int len = 0;                while ((len = fis.read(buffer)) > 0) { // 读入需要下载的文件的内容，打包到zip文件                    out.write(buffer, 0, len);                }                out.closeEntry();                fis.close();            }        }        out.close();    }    public static byte[] getByteFromInputStream(InputStream inputStream) {        try {            BufferedImage bufferedImage = ImageIO.read(inputStream);            ByteArrayOutputStream byteArrayOut = new ByteArrayOutputStream();            ImageIO.write(bufferedImage, "jpg", byteArrayOut);            return byteArrayOut.toByteArray();        } catch (Exception e) {            e.printStackTrace();            return null;        }    }    public static String imageToBase64(InputStream input) throws IOException{        ByteArrayOutputStream out = new ByteArrayOutputStream();        Base64 base64 = new Base64();        byte[] temp = new byte[1024];        for(int len = input.read(temp); len != -1;len = input.read(temp)){            out.write(temp, 0, len);        }        StringBuilder pictureBuffer = new StringBuilder();        pictureBuffer.append(new String( base64.encodeBase64Chunked(out.toByteArray())));        return pictureBuffer.toString();    }}