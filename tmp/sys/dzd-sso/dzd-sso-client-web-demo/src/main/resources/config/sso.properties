#单点登录配置
#该参数请忽略，因为确定使用sso
sso.enable=true

#过滤器类型默认使用SsoWebFilter, 1表示试用springMVC拦截器
sso.filterType=1
sso.ssoServer=http://localhost:8080
sso.logoutPath=/sso/logout
sso.loginPath=/sso/login
sso.excludedPaths=/front/**,/resources/**,/login,/admin,/admin/login,/forget,/reg
sso.redis.address=redis://127.0.0.1:6379
sso.redis.expire.minite=1440


#以下为服务端用到的参数
#登陆表单参数key
sso.form.key.username=account
sso.form.key.password=password
sso.form.key.remember=RememberMe
#登陆页面cookie key
sso.cookie.key.username=sso_account
sso.cookie.key.password=sso_password
sso.cookie.key.remember=RememberMe

#服务端配置
#接口ISsoLoginHelper目前2个实现类SsoWebLoginHelper和SsoTokenLoginHelper，分别用于基于Cookie的web和基于token的移动端场景
sso.server.bean.ISsoLoginHelper=SsoWebLoginHelper
#接口ISsoLoginStore目前1个实现类SsoLoginStore，基于redis的session信息存储方式。有兴趣可以通过实现该接口扩展其它的存储方式
sso.server.bean.ISsoLoginStore=SsoLoginStore
#接口ISsoSessionIdHelper目前2个实现类，SsoSessionIdHelper是xxl-sso原有的sessionId生成器。还有MySsoSessionIdHelper是我定义的，主要是对sessionId加密了
sso.server.bean.ISsoSessionIdHelper=MySsoSessionIdHelper
#该接口是xxl-sso-server中的UserService，我重命名了，因为UserService这个名字在很多系统已经存在，并且没有代表性。该接口主要用于用户数据库登录校验
sso.server.bean.SsoUserService=MyUserServiceImpl

