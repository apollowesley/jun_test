package com.jfast.web.admin.controller.system;import com.jfast.common.annotation.Param;import com.jfast.common.annotation.ParamsType;import com.jfast.common.annotation.ParamsValidate;import com.jfast.common.base.BaseController;import com.jfast.common.model.ModelMap;import com.jfast.common.utils.ResultCode;import com.jfast.web.admin.controller.ApiController;import com.jfast.web.admin.service.system.SystemAdminService;import org.apache.shiro.authz.annotation.Logical;import org.apache.shiro.authz.annotation.RequiresPermissions;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.*;import java.util.Map;/** * @author zengjintao * @create 2019/4/12 15:09 * @since 1.0 **/@RestController@RequestMapping("/system/admin")public class SystemAdminController extends ApiController {    @Autowired    private SystemAdminService systemAdminService;    @GetMapping({"", "list"})    @RequiresPermissions("system:admin:list")    public Map list(@RequestParam Map params) {        Map data = getPageData(params);        return systemAdminService.list(data);    }    /**     * 重置密码     * @param params     * @return     */    @PostMapping("updatePassword")    @ParamsValidate(params = {        @Param(name = "password", message = "请输入密码"),        @Param(name = "confirmPassword", message = "请输入确认密码")    }, paramsType = ParamsType.JSON_DATA)    @RequiresPermissions("system:admin:updatePassword")    public ResultCode updatePassword(@RequestBody Map params) {        String password = (String)params.get("password");        String confirmPassword = (String)params.get("confirmPassword");        if (!password.equals(confirmPassword)) {            return new ResultCode(ResultCode.FAIL, "密码与确认密码不一致");        }        params.remove("confirmPassword");        return systemAdminService.updatePassword(params);    }    /**     * 修改密码     * @param params     * @return     */    @PostMapping("resettingPassword")    @ParamsValidate(params = {        @Param(name = "password", message = "请输入原始密码"),        @Param(name = "newPassword", message = "请输入新密码"),        @Param(name = "confirmPassword", message = "请输入确认密码")    }, paramsType = ParamsType.JSON_DATA)    public ResultCode resettingPassword (@RequestBody ModelMap params) {        String newPassword = params.getStr("newPassword");        String confirmPassword = params.getStr("confirmPassword");        if (!newPassword.equals(confirmPassword)) {            return new ResultCode(ResultCode.FAIL, "密码与确认密码不一致");        }        params.remove("confirmPassword");        return systemAdminService.resettingPassword(params);    }    @DeleteMapping    @RequiresPermissions({"system:admin:deleteById"})    public ResultCode deleteById(@RequestBody Map params) {        Integer createType = (Integer)params.get("create_type");        if (createType == ResultCode.SUCCESS) {            return new ResultCode(ResultCode.FAIL, "您不能删除系统内置管理员");        }        params.put("operation", "管理员" + params.get("login_name"));        return systemAdminService.deleteById(params);    }    @GetMapping("findById")    public Map findById(Integer id) {        return systemAdminService.findById(id);    }    @PostMapping    @RequiresPermissions(value = {"system:admin:save", "system:admin:update"}, logical = Logical.OR)    public ResultCode saveOrUpdate(@RequestBody Map params) {        Integer createType = (Integer)params.get("create_type");        if (createType != null && createType == ResultCode.SUCCESS) {            return new ResultCode(ResultCode.FAIL, "您不能编辑系统内置管理员");        }        return systemAdminService.saveOrUpdate(params);    }}