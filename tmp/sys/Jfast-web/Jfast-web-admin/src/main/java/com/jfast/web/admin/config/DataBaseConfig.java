package com.jfast.web.admin.config;import org.apache.ibatis.session.SqlSessionFactory;import org.mybatis.spring.SqlSessionFactoryBean;import org.mybatis.spring.SqlSessionTemplate;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.beans.factory.annotation.Value;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.core.io.DefaultResourceLoader;import org.springframework.core.io.Resource;import org.springframework.core.io.support.PathMatchingResourcePatternResolver;import javax.sql.DataSource;/** * @author zengjintao * @create 2019/6/17 10:05 * @since 1.0 **/@Configurationpublic class DataBaseConfig {    private static final Logger log = LoggerFactory.getLogger(DataBaseConfig.class);    @Autowired    private DataSource dataSource;    @Value("${mybatis.mapper-locations}")    private String mapperLocations;    @Value("${mybatis.config-location}")    private String configLocation;    public DataBaseConfig() {    }    @Bean(            name = {"sqlSessionFactory"}    )    public SqlSessionFactory sqlSessionFactory() {        SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean();        sqlSessionFactoryBean.setDataSource(this.dataSource);        try {            Resource[] resources = (new PathMatchingResourcePatternResolver()).getResources(this.mapperLocations);            sqlSessionFactoryBean.setMapperLocations(resources);            sqlSessionFactoryBean.setConfigLocation((new DefaultResourceLoader()).getResource(this.configLocation));            return sqlSessionFactoryBean.getObject();        } catch (Exception var3) {            log.error("sqlSessionFactory can not init", var3);            return null;        }    }    @Bean(            name = {"sqlSessionTemplate"}    )    public SqlSessionTemplate sqlSessionTemplate(@Qualifier("sqlSessionFactory") SqlSessionFactory sqlSessionFactory) {        SqlSessionTemplate sqlSessionTemplate = new SqlSessionTemplate(sqlSessionFactory);        return sqlSessionTemplate;    }}