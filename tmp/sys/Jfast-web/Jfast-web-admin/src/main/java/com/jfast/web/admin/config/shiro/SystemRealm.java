package com.jfast.web.admin.config.shiro;import com.jfast.common.model.UserSession;import com.jfast.common.utils.IpUtils;import com.jfast.common.utils.Md5Utils;import com.jfast.common.utils.ObjectUtils;import com.jfast.common.utils.RequestUtils;import com.jfast.web.admin.config.SpringBeanManager;import com.jfast.web.admin.service.system.SystemAdminService;import com.jfast.web.admin.service.system.SystemRoleService;import org.apache.shiro.authc.*;import org.apache.shiro.authz.AuthorizationInfo;import org.apache.shiro.authz.SimpleAuthorizationInfo;import org.apache.shiro.realm.AuthorizingRealm;import org.apache.shiro.subject.PrincipalCollection;import org.mybatis.spring.SqlSessionTemplate;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.util.Date;import java.util.HashMap;import java.util.Map;/** * @author zengjintao * @create 2019/6/17 10:01 * @since 1.0 **/public class SystemRealm extends AuthorizingRealm {    private static final Logger log = LoggerFactory.getLogger(SystemRealm.class);    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {        UserSession adminSession = (UserSession)principals.getPrimaryPrincipal();        if (ObjectUtils.isNotEmpty(adminSession)) {            int userId = adminSession.getUserId();            Map params = new HashMap();            Integer count = (Integer)adminSession.getUserMap().get("login_count");            params.put("loginCount", count + 1);            params.put("loginIp", IpUtils.getAddressIp(RequestUtils.getRequest()));            params.put("lastLoginTime", new Date());            params.put("userId", userId);            SqlSessionTemplate sqlSessionTemplate = this.getSqlSessionTemplate();            int result = sqlSessionTemplate.update("system.admin.updateByUserId", params);            if (result > 0) {                log.info("用户登录信息更新成功");            }            return this.loadPermission(adminSession);        } else {            return null;        }    }    private AuthorizationInfo loadPermission(UserSession adminSession) {        if (ObjectUtils.isNotEmpty(adminSession)) {            SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();            info.addStringPermissions(adminSession.getPermissionList());            return info;        } else {            return null;        }    }    private SqlSessionTemplate getSqlSessionTemplate() {        return (SqlSessionTemplate) SpringBeanManager.getBean(SqlSessionTemplate.class);    }    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {        UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken)authenticationToken;        String userName = usernamePasswordToken.getUsername();        Map userMap = this.getSystemAdminService().findAdminByName(userName);        if (userMap == null) {            throw new UnknownAccountException("用户不存在");        } else {            String password = Md5Utils.getMd5(new String(usernamePasswordToken.getPassword()), (String)userMap.get("encrypt"));            usernamePasswordToken.setPassword(password.toCharArray());            return new SimpleAuthenticationInfo(new UserSession(userMap), userMap.get("password"), this.getName());        }    }    private SystemAdminService getSystemAdminService() {        return (SystemAdminService)SpringBeanManager.getBean(SystemAdminService.class);    }    private SystemRoleService getSystemRoleService() {        return (SystemRoleService)SpringBeanManager.getBean(SystemRoleService.class);    }}