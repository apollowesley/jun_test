package cn.backflow.admin.common.treeable;

import java.util.*;

/**
 * 树形对象通用接口, 工具类
 *
 * @author backflow
 *         2014年10月16日 上午10:02:51
 */
public interface Treeable {

    String getName();

    Integer getId();

    Integer getParent();

    List<Treeable> getChildren();

    Treenode asTreenode();

    static List<Treeable> tree(Collection<? extends Treeable> list) {
        if (list == null || list.isEmpty()) return Collections.emptyList();
        Map<Integer, Treeable> map = new LinkedHashMap<>(list.size());
        for (Treeable t : list) {
            map.put(t.getId(), t);
        }
        return tree(map);
    }

    static List<Treeable> tree(Map<? extends Integer, ? extends Treeable> map) {
        return tree(map, 0);
    }

    /**
     * 将数据封装成树形结构，无限级深，只需遍历一次
     */
    static List<Treeable> tree(Map<? extends Integer, ? extends Treeable> map, Integer root) {
        if (map == null || map.isEmpty())
            return Collections.emptyList();
        List<Treeable> tree = new ArrayList<>(map.size());
        for (Treeable v : map.values()) {
            Integer pid = v.getParent();
            Treeable parent = map.get(pid);
            if (Objects.equals(pid, root)/* || parent == null*/)
                tree.add(v);
            else if (parent != null) {
                parent.getChildren().add(v);
            }
        }
        return tree;
    }

    /**
     * 将数据封装成 jstree.js 需要的 树形结构
     */
    static List<Treenode> jstree(Collection<? extends Treeable> nodes, Collection<Integer> selected, Collection<Integer> unselectable) {

        if (nodes.isEmpty())
            return Collections.emptyList();

        int size = nodes.size();
        Map<Integer, Treenode> map = new HashMap<>(size);
        for (Treeable n : nodes) {
            Treenode node = n.asTreenode();
            if (selected != null && selected.contains(node.id))
                node.state.put("selected", true);
            else if (unselectable != null && unselectable.contains(node.id))
                node.state.put("disabled", true);
            map.put(node.id, node);
        }
        List<Treenode> tree = new ArrayList<>(size);
        for (Treenode n : map.values()) {
            Integer pid = n.pid;
            Treenode parent = map.get(pid);
            if (pid == 0 || parent == null) { // 根节点
                tree.add(n);
            } else {
                parent.children.add(n);
            }
        }
        return tree;
    }

    /**
     * 构造 jquery.treetable.js 需要的数据结构 (子元素紧跟在父元素之后)
     *
     * @param treeables 包含所有节点的列表
     * @param pid       父元素ID
     * @param tree      排序好的权限列表
     */
    static List<Treeable> sort(Collection<? extends Treeable> treeables, Integer pid, List<Treeable> tree) {
        for (Treeable t : treeables) {
            // 当前元素不是pid的子元素, 或已被添加过时, 跳过
            if (!t.getParent().equals(pid) || tree.contains(t)) continue;
            // 追加到列表当中
            tree.add(t);
            // 追加子元素
            sort(treeables, t.getId(), tree);
        }
        return tree;
    }

    /**
     * jstree.js helper class
     * Created by Nandy on 2016/5/14.
     * Expected format of the node (there are no required fields)
     * <pre>
     * {
     *   id            : "string"    // will be autogenerated if omitted
     *   text          : "string" // node text
     *   icon          : "string" // string for custom icon
     *   state         : {
     *       opened    : boolean  // is the node open
     *       disabled  : boolean  // is the node disabled
     *       selected  : boolean  // is the node selected
     *   },
     *   children      : []  // array of strings or objects
     *   li_attr       : {}  // attributes for the generated LI node
     *   a_attr        : {}  // attributes for the generated A node
     * }
     * </pre>
     */
    @SuppressWarnings("WeakerAccess")
    class Treenode {
        public Integer id;
        public Integer pid;
        public String text;
        public String code;
        public String icon;
        public String type;
        public Map<String, Object> state = new HashMap<>();
        public List<Treenode> children = new ArrayList<>();
    }
}