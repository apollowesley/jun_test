!function(){var t,r="function"==typeof require?require(".."):window._;QUnit.module("utility",{beforeEach:function(){t=r.clone(r.templateSettings)},afterEach:function(){r.templateSettings=t}}),QUnit.test("获取随机数：getRandom",function(t){var e=r.range(1e3),a=Math.pow(2,31),o=Math.pow(2,62);t.ok(r.every(e,function(){return r.getRandom(a,o)>=a}),"是否应该产生一个大于或等于最小值的随机数"),t.ok(r.some(e,function(){return 0<r.getRandom(Number.MAX_VALUE)}),"当传递“Number.MAX_VALUE”时，应该生成一个随机数")}),QUnit.test("字节格式化：formatBytes",function(t){t.ok("1 KB"==r.formatBytes(1024),"1KB转换正确"),t.ok("1 KB"==r.formatBytes("1024"),"1KB转换正确"),t.ok("1.21 KB"==r.formatBytes(1234),"1.21KB转换正确"),t.ok("1.205 KB"==r.formatBytes(1234,3),"1.205KB转换正确")}),QUnit.test("比较两个数值的大小：numCompare",function(t){t.ok(-1==r.numCompare(3,5),"3<5,判断正确"),t.throws(function(){r.numCompare("ab",3)},"ab与3是不同类型无法判断"),t.ok(0==r.numCompare(3,3),"3>3，两个数值相等,判断错误"),t.ok(-1==r.numCompare(.1,.11),"0.1<0.11,判断正确"),t.ok(1==r.numCompare(-1,-2),"-1>-2,判断正确"),t.ok(1==r.numCompare(0,-1),"0>-1,判断正确")}),QUnit.test("去左空格：ltrim",function(t){t.ok("abcdegfg"==r.ltrim("    abcdegfg"," "),"    abcdegfg去除左空格成功"),t.ok("dff  fad"==r.ltrim("  dff  fad"," "),"  dff  fad去除左空格成功"),t.ok("dff  fad"==r.ltrim("dff  fad"," "),"dff  fad去除左空格成功"),t.ok("_ad"==r.ltrim("_ad"," "),"_ad不含左空格")}),QUnit.test("去右空格：rtrim",function(t){t.ok("abcdegfg"==r.rtrim("abcdegfg     "," "),"abcdegfg     去除右空格成功"),t.ok("abcd  egfg"==r.rtrim("abcd  egfg     "," "),"abcd  egfg     去除右空格成功"),t.ok("abcd  egfg"==r.rtrim("abcd  egfg"," "),"abcd  egfg去除右空格成功"),t.ok("ab——"==r.rtrim("ab——"," "),"ab——不含右空格")}),QUnit.test("判断是否为数组:_.isArray",function(t){t.ok(1==r.isArray([1,2,3]),"[1,2,3]是数组"),t.ok(1==r.isArray([[1],[3]]),"[[1],[3]]是数组"),t.ok(1==r.isArray([1]),"[1]是数组"),t.ok(1==r.isArray([1],[2]),"[1],[2]是数组"),t.ok(0==r.isArray({1:2}),"{1:2}不是数组"),t.ok(0==r.isArray("a"),"字母a不是数组"),t.ok(0==r.isArray("a"),'"a"不是数组'),t.ok(0==r.isArray(123),"123不是数组"),t.ok(0==r.isArray(null),"null不是数组"),t.ok(0==r.isArray(!0),"true不是数组"),t.ok(0==r.isArray(void 0),"undefinded不是数组")}),QUnit.test("判断是否为数值： _.isNumeric",function(t){for(var e=[123,83,"123",0,123.12,123,-123,"-12",[1],[1,2],255,"0xFF",8e5,"8e5","a",["a"],{11:2},null,!0],a=0;a<e.length;a++){var o=r.isNumeric(e[a]);o?t.ok(o,e[a]+"是数值"):t.notOk(o,e[a]+"不是数值")}}),QUnit.test("阿拉伯数字转中文数字： _.cl",function(t){t.ok("十万零一百一十一"==r.cl("100111",{tenMin:!0})),t.ok("一十万零一百一十一"==r.cl("100111")),t.ok("十三点五"==r.cl("13.5",{tenMin:!0})),t.ok("一亿亿"==r.cl(1e16))}),QUnit.test("固定获取月份第一天：_.firstDay",function(t){t.ok("2019-05-01 00:00:00"==r.dateFormat(r.firstDay(new Date("2019-05-09 06:20:30"))),"2019年5月的第一天是2019-05-01")}),QUnit.test("固定获取月份最后一天：_.firstDay",function(t){t.ok("2019-11-30 00:00:00"==r.dateFormat(r.lastDay(new Date("2019-11-1 06:20:30"))),"2019年11月的最后一天是2019-11-30"),t.ok("2019-12-31 00:00:00"==r.dateFormat(r.lastDay(new Date("2019-12-1 06:20:30"))),"2019年12月的最后一天是2019-12-31"),t.ok("2019-02-28 00:00:00"==r.dateFormat(r.lastDay(new Date("2019-2-3 06:20:30"))),"2019年2月的最后一天是2019-02-28")}),QUnit.test("获取随机日期：_.getRandomDate",function(t){t.ok(r.dateFormat(r.getRandomDate()),"随机日期"+r.dateFormat(r.getRandomDate()))}),QUnit.test("随机获取月份第一天：_.firstDay",function(t){for(var e=new Date,a=0;a<5;a++)e=r.getRandomDate(),t.ok(r.dateFormat(r.firstDay(e)),r.dateFormat(e)+"的第一天是"+r.dateFormat(r.firstDay(e)))}),QUnit.test("随机获取月份最后一天：_.lastDay",function(t){for(var e=new Date,a=0;a<5;a++)e=r.getRandomDate(),t.ok(r.dateFormat(r.lastDay(e)),r.dateFormat(e)+"的最后一天是"+r.dateFormat(r.lastDay(e)))}),QUnit.test("数组差集:_.difference",function(t){t.ok(r.equals(r.difference([1,2],[1,2]),[]),"[1, 2], [1, 2]的差集是[]"),t.ok(r.equals(r.difference([1,2,3],[1,2]),[3]),"[1, 2, 3], [1, 2]的差集是[3]"),t.ok(r.equals(r.difference([1,2,3],[4,5,6]),[1,2,3]),"[1, 2, 3], [4, 5, 6]的差集是[1, 2, 3]"),t.ok(r.equals(r.difference(["a","b"],["a"]),["b"]),"pass"),t.ok(r.equals(r.difference(["a","b"],["b"]),["a"]),"pass")}),QUnit.test("数组元素是否重复:_.isRepeat",function(t){t.ok(0==r.isRepeat([1,2,3]),"数组[1,2,3]没有重复元素"),t.ok(r.isRepeat([1,2,3,3]),"数组[1,2,3,3]有重复元素"),t.ok(0==r.isRepeat([1,2,3.2,3]),"数组[1,2,3.2,3]没有重复元素"),t.ok(0==r.isRepeat([-1,1]),"数组[-1,1]没有重复元素"),t.ok(0==r.isRepeat(["a","A"]),"数组['a','A']没有重复元素"),t.ok(r.isRepeat([0,0,0,1]),"数组[0,0,0,1]有重复元素")}),QUnit.test("获得本周的开始日期和结束日期：_.getWeekStartDate/_.getWeekEndDate",function(t){t.ok(r.dateFormat(r.getWeekStartDate()),"本周的开始日期是"+r.dateFormat(r.getWeekStartDate())),t.ok(r.dateFormat(r.getWeekEndDate()),"本周的开始日期是"+r.dateFormat(r.getWeekEndDate()))}),QUnit.test("返回日期的yyyy-MM-dd格式:_.shortDateFormat",function(t){t.ok(r.now(),r.now()),t.throws(function(){r.shortDateFormat(new Date("adcvb"))},"abcvb的日期格式不正确"),t.throws(function(){r.shortDateFormat(new Date(-1e11))},"-100000000000的日期格式不正确"),t.ok(r.shortDateFormat(new Date(2016,4,5,17,55,55)),"2016,4,5,17,55,55的简洁日期为"+r.shortDateFormat(new Date(2016,4,5,17,55,55))),t.ok(r.shortDateFormat(new Date(2016,1,33,17,55,55)),"2016,1,33,17,55,55的简洁日期为"+r.shortDateFormat(new Date(2016,1,33,17,55,55))),t.ok(r.shortDateFormat(new Date(2016,4,5,17,55)),"2016,4,5,17,55的简洁日期为"+r.shortDateFormat(new Date(2016,4,5,17,55))),t.ok(r.shortDateFormat(new Date(2016,4,5,17)),"2016,4,5,17的简洁日期为"+r.shortDateFormat(new Date(2016,4,5,17))),t.ok(r.shortDateFormat(new Date(2016,4,5)),"2016,4,5的简洁日期为"+r.shortDateFormat(new Date(2016,4,5))),t.ok(r.shortDateFormat(new Date(2016,4)),"2016,4的简洁日期为"+r.shortDateFormat(new Date(2016,4))),t.ok(r.shortDateFormat(new Date(2016)),"2016的简洁日期为"+r.shortDateFormat(new Date(2016))),t.ok(r.shortDateFormat(new Date(99,4,5)),"99,4,5的简洁日期为"+r.shortDateFormat(new Date(99,4,5))),t.ok(r.shortDateFormat(new Date("October 13, 2014 11:13:00")),'"October 13, 2014 11:13:00"的简洁日期为'+r.shortDateFormat(new Date("October 13, 2014 11:13:00"))),t.ok(r.shortDateFormat(new Date(1e11)),"100000000000的简洁日期为"+r.shortDateFormat(new Date(1e11)))}),QUnit.test("将时间格式化为指定格式的String的相互转换:_.formatTime，_.unformatTime",function(t){t.ok(r.formatTime(96420),"96420秒的指定string格式为"+r.formatTime(96420)),t.ok(r.formatTime(0),"0秒的指定string格式为"+r.formatTime(0)),t.throws(function(){r.formatTime(-20)},"-20时间错误");for(var e=0;e<5;e++){var a=r.getRandom(0,86400);t.ok(r.formatTime(a),a+"秒的指定string格式为"+r.formatTime(a)),t.ok(r.unformatTime(r.formatTime(a)),r.formatTime(a)+"的秒格式为"+r.unformatTime(r.formatTime(a)))}}),QUnit.test("洗牌数组： _.shuffle",function(t){t.ok(r.shuffle([1,2,3,4,5]),"[1,2,3,4,5]洗牌后的数组"+r.shuffle([1,2,3,4,5])),t.ok(r.shuffle([1]),"[1]洗牌后的数组"+r.shuffle([1])),t.ok(r.shuffle(["a","b","c","d"]),"['a','b','c','d']洗牌后的数组"+r.shuffle(["a","b","c","d"])),t.ok(r.shuffle([2,"a","b","c","d",1,3]),"[2,'a','b','c','d'1,3]洗牌后的数组"+r.shuffle([2,"a","b","c","d",1,3]))}),QUnit.test("数组去重：_.unique ",function(t){t.ok(r.unique([1,2,3,5,5]),"[1, 2, 3, 5, 5]数组去重后["+r.unique([1,2,3,5,5])+"]"),t.ok(r.unique([1,1,1,1,1]),"[1, 1,1,1,1]数组去重后"+r.unique([1,1,1,1,1])),t.ok(r.unique([1,-1,0,-0]),"[1,-1,0,-0]数组去重后"+r.unique([1,-1,0,-0])),t.ok(r.unique([1,1,"a","A"]),"[1, 1, 'a', 'A']数组去重后"+r.unique([1,1,"a","A"])),t.ok(r.unique(["abcd","ab"]),"['abcd', 'ab']数组去重后"+r.unique(["abcd","ab"]))}),QUnit.test("数组严格比较：_.equals",function(t){var e=[1,2,3,4],a=[2,1,4,3];t.ok(0==r.equals(e,a),"数组[1, 2, 3, 4]和数组 [2, 1, 4, 3]不是严格相等"),t.ok(r.equals(e,a,!1),"不严格比较数组[1, 2, 3, 4]和数组 [2, 1, 4, 3]是相等的"),t.ok(0==r.equals(e,[1,2]),"数组[1, 2, 3, 4]和数组 [1,2]不是严格相等"),t.ok(0==r.equals(e,[2,2,3,4]),"数组[1, 2, 3, 4]和数组 [2, 2, 3, 4]不是严格相等"),t.ok(r.equals(e,[1,2,3,4]),"数组[1, 2, 3, 4]和数组 [[1, 2, 3, 4]是严格相等")})}();