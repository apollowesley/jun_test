worker_processes  3;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

	#测试使用的,生产根据实际情况配置
    upstream paygent {
		server 127.0.0.1:81;
		server 127.0.0.1:82;
		server 127.0.0.1:83;
    }

	#灰度必须的，内存可以调整
    lua_shared_dict whitelistCache 10m;
    lua_shared_dict strategyCache 1m;
    lua_package_path "${gray.base.path}plugin/lua-resty-http/lib/?.lua;${gray.base.path}plugin/dkjson.lua;;";
	#灰度必须的
    init_by_lua 'ngx.shared.strategyCache:set("workerTotal",0)';
    init_worker_by_lua '
    	--配置nginx所要负载的应用的唯一id，多个用","分割
		applicationIds = {"paygent"}
		--加载manager_cmd准备初始化
		dofile("${gray.base.path}lua/manager_cmd.lua")
		--local applicationIds = {"paygent"}
		reloadInit(applicationIds)
    ';
    #灰度必须的，动态控制upstream
    server {
        listen 65533;
        location / {
            dyups_interface;
        }
    }
	#灰度必须的，内存可以调整
    server {
        listen 88;
        location / {
            default_type 'text/plain';
            content_by_lua '
                local wi = ngx.shared.whitelistCache
                local list = wi:get_keys(0)
				for index,user in pairs(list) do
					ngx.say(user .. "--->".. wi:get(user))
				end
		
				ngx.say("-----------------------------------------------------")
				local sc = ngx.shared.strategyCache
                    list = sc:get_keys(0)
                    for index,user in pairs(list) do
                            ngx.say(user .. "--->"..sc:get(user))
                    end
                ';
        }
    }
	#测试使用的,生产根据实际情况配置
    server {
        listen 81;
        location / {
            default_type 'text/plain';
            content_by_lua '
			ngx.say("81")
		';
        }
    }
    server {
        listen 82;
        location / {
            default_type 'text/plain';
            content_by_lua 'ngx.say("82")';
        }
    }
    server {
        listen 83;
        location / {
            default_type 'text/plain';
	    content_by_lua 'ngx.say("83")';
        }
    }
    
    #灰度服务配置,生产根据实际情况配置
    server {
        listen       80;
        server_name  localhost;

		lua_code_cache off;

		#流量入口,生产根据实际情况配置应用id
		location / {
			set $cur_application_id "paygent";
			set $cur_proxy_pass "paygent";
	        default_type 'text/plain';
			#set_by_lua_file $cur_proxy_pass ${gray.base.path}lua/request_proxy.lua;
			rewrite_by_lua ${gray.base.path}lua/request_proxy.lua;
			proxy_pass http://$cur_proxy_pass;
        }
	
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
