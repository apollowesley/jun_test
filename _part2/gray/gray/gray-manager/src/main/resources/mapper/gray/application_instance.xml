<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.xlz.gray.mapper.ApplicationInstanceMapper">
	
	<sql id="columnListWithoutId" >
		application_id,
		type,
		gray_instance,
		deploy_instance,
		remark,
		status,
		create_time,
		create_user,
		update_time,
		update_user
	</sql>
	
	<sql id="columnList" >
	    id , <include refid="columnListWithoutId" />
	</sql>
	
	<resultMap type="com.xlz.gray.model.ApplicationInstance" id="result">
		<result column="id" property="id"/>
		<result column="application_id" property="applicationId"/>
		<result column="type" property="type"/>
		<result column="gray_instance" property="grayInstance"/>
		<result column="deploy_instance" property="deployInstance"/>
		<result column="remark" property="remark"/>
		<result column="status" property="status"/>
		<result column="create_time" property="createTime"/>
		<result column="create_user" property="createUser"/>
		<result column="update_time" property="updateTime"/>
		<result column="update_user" property="updateUser"/>
	</resultMap>
	
	<insert id="save" keyColumn="id" keyProperty="id" useGeneratedKeys="true">
		insert into gray_application_instance (	
			id,
			application_id,
			type,
			gray_instance,
			deploy_instance,
			remark,
			status,
			create_time,
			create_user,
			update_time,
			update_user
			)
		values(
			#{id},
			#{applicationId},
			#{type},
			#{grayInstance},
			#{deployInstance},
			#{remark},
			#{status},
			#{createTime},
			#{createUser},
			#{updateTime},
			#{updateUser}
	
		)
	</insert>
	
	<update id="update">
		update 
			gray_application_instance
		<set>
			<if test="applicationId != null">
				application_id=#{applicationId},
			</if>
			<if test="type != null">
				type=#{type},
			</if>
			<if test="grayInstance != null">
				gray_instance=#{grayInstance},
			</if>
			<if test="deployInstance != null">
				deploy_instance=#{deployInstance},
			</if>
			<if test="remark != null">
				remark=#{remark},
			</if>
			<if test="status != null">
				status=#{status},
			</if>
			<if test="createTime != null">
				create_time=#{createTime},
			</if>
			<if test="createUser != null">
				create_user=#{createUser},
			</if>
			<if test="updateUser != null">
				update_user=#{updateUser},
			</if>
			update_time=now()
		</set>
		where 
			id = #{id}
	</update>
	
	<delete id="delete">
		delete from 
			gray_application_instance 
		where 
			id = #{id}
	</delete>
	
	<select id="findById" resultMap="result">
		select 
			<include refid="columnList" />
		from 
			gray_application_instance 
		where 
			id = #{id}
	</select>
	
	<select id="findAll" resultMap="result">
		select 
			<include refid="columnList" />
		from 
			gray_application_instance  
		<include refid="Common.parseFilterRules"/>
	</select>
	
	<select id="getTotalCount" resultType="int">
        select count(*)
        from 
        	gray_application_instance
        <include refid="Common.parseFilterRules"/>
    </select>
    
	<select id="findByPage" resultMap="result">
		select 
			<include refid="columnList" />
		from 
			gray_application_instance 
		<include refid="Common.parseFilterRules"/>
		order by ${pageQuery.sort} ${pageQuery.order}
		limit #{pageQuery.start} , #{pageQuery.pageSize}
	</select>
</mapper>